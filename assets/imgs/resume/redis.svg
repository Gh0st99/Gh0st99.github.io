<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="3296px" preserveAspectRatio="none" style="width:1002px;height:3296px;background:#FFFFFF;" version="1.1" viewBox="0 0 1002 3296" width="1002px" zoomAndPan="magnify"><defs><filter height="300%" id="f1kdgkgzuf4oy9" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="59" x="10" y="1629.2695"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="20" y="1652.2646">Redis</text><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="76" x="119" y="1035.9961"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="129" y="1058.9912">数据结构</text><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="55" x="245" y="443.8672"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="35" x="255" y="466.8623">Hash</text><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="76" x="350" y="370.6797"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="360" y="393.6748">数据结构</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="479" y="23.9951">ziplist</text><path d="M426,388.8281 L436,388.8281 C451,388.8281 451,19.1484 466,19.1484 L476,19.1484 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="483" y="42.292"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="479" y="58.5889">哈希表</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="479" y="74.8857">typedef struct dictht {</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="495" y="91.1826">// 哈希表数组</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="495" y="107.4795">dictEntry **table</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="495" y="123.7764">// 哈希表大小</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="495" y="140.0732">unsigned long size</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="224" x="495" y="156.3701">// 哈希表大小掩码，用于计算索引值</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="495" y="172.667">// 总是等于 size - 1</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="495" y="188.9639">unsigned long sizemask</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="495" y="205.2607">// 该哈希表已有节点的数量</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="495" y="221.5576">unsigned long used</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="483" y="237.8545"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="52" x="479" y="254.1514">} dictht</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="483" y="270.4482"/><path d="M426,388.8281 L436,388.8281 C451,388.8281 451,151.5234 466,151.5234 L476,151.5234 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="483" y="288.7451"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="479" y="305.042">哈希表节点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="173" x="479" y="321.3389">typedef struct dictEntry {</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="495" y="337.6357">// 键</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="63" x="495" y="353.9326">void *key</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="495" y="370.2295">// 值</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="52" x="495" y="386.5264">union {</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="511" y="402.8232">void *val</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="87" x="511" y="419.1201">uint64_t u64</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="511" y="435.417">int64_t s64</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="20" x="495" y="451.7139">} v</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="495" y="468.0107">// 指向下个哈希表节点，形成链表</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="495" y="484.3076">struct dictEntry *next</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="483" y="500.6045"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="479" y="516.9014">} dictEntry</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="483" y="533.1982"/><path d="M426,388.8281 L436,388.8281 C451,388.8281 451,406.125 466,406.125 L476,406.125 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="483" y="551.4951"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="479" y="567.792">字典</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="479" y="584.0889">typedef struct dict {</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="495" y="600.3857">// 类型特定函数</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="495" y="616.6826">dictType *type</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="495" y="632.9795">// 私有数据</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="495" y="649.2764">void *privdata</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="495" y="665.5732">// 哈希表 ht[1]只在 rehash 使用</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="495" y="681.8701">dictht ht[2]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="94" x="495" y="698.167">// rehash 索引</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="495" y="714.4639">// 当 rehash 不在进行时，值为 -1</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="435" x="495" y="730.7607">int rehashidx; /* rehashing not in progress if rehashidx == -1 */</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="38" x="479" y="747.0576">} dict</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="483" y="763.3545"/><path d="M426,388.8281 L436,388.8281 C451,388.8281 451,652.5781 466,652.5781 L476,652.5781 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M300,462.0156 L310,462.0156 C325,462.0156 325,388.8281 340,388.8281 L350,388.8281 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="76" x="350" y="786.1016"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="360" y="809.0967">负载因子</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="236" x="479" y="781.6514">没有 BG ht[0].used / ht[0].size &gt; 1</text><path d="M426,804.25 L436,804.25 C451,804.25 451,776.8047 466,776.8047 L476,776.8047 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="222" x="479" y="799.9482">有 BG ht[0].used / ht[0].size &gt; 5</text><path d="M426,804.25 L436,804.25 C451,804.25 451,795.1016 466,795.1016 L476,795.1016 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="445" x="479" y="818.2451">BG 会启动子进程，copy-on-write，提高效率，提高负载因子，避免 re</text><path d="M426,804.25 L436,804.25 C451,804.25 451,813.3984 466,813.3984 L476,813.3984 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="224" x="479" y="836.542">ht[0].used / ht[0].size &lt; 0.1 收缩</text><path d="M426,804.25 L436,804.25 C451,804.25 451,831.6953 466,831.6953 L476,831.6953 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M300,462.0156 L310,462.0156 C325,462.0156 325,804.25 340,804.25 L350,804.25 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="68" x="350" y="859.2891"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="360" y="882.2842">rehash</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="410" x="471" y="854.8389">1. 为 ht[1] 分配空间， 让字典同时持有 ht[0] 和 ht[1] 两个哈希表</text><path d="M418,877.4375 L428,877.4375 C443,877.4375 443,849.9922 458,849.9922 L468,849.9922 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="471" y="873.1357">2. rehashidx = 0，表示开始</text><path d="M418,877.4375 L428,877.4375 C443,877.4375 443,868.2891 458,868.2891 L468,868.2891 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="416" x="471" y="891.4326">3. 开始对桶内元素 rehash，完成后 hashidx++，表示下个桶位置</text><path d="M418,877.4375 L428,877.4375 C443,877.4375 443,886.5859 458,886.5859 L468,886.5859 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="267" x="471" y="909.7295">4. ht[0] 所有的 rehash 完，hashidx = -1</text><path d="M418,877.4375 L428,877.4375 C443,877.4375 443,904.8828 458,904.8828 L468,904.8828 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M300,462.0156 L310,462.0156 C325,462.0156 325,877.4375 340,877.4375 L350,877.4375 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M195,1054.1445 L205,1054.1445 C220,1054.1445 220,462.0156 235,462.0156 L245,462.0156 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="43" x="245" y="996.6641"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="23" x="255" y="1019.6592">Set</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="117" x="341" y="928.0264">无序的 string 集合</text><path d="M288,1014.8125 L298,1014.8125 C313,1014.8125 313,923.1797 328,923.1797 L338,923.1797 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="76" x="338" y="1005.8125"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="348" y="1028.8076">数据结构</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="471" y="946.3232"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="467" y="962.6201">typedef struct</text><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="45" x="567" y="962.6201">intset</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="9" x="616" y="962.6201">{</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="483" y="978.917">// 保存元素所使用的类型的长度</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="483" y="995.2139">uint32_t encoding</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="483" y="1011.5107">// 元素个数</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="483" y="1027.8076">uint32_t length</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="483" y="1044.1045">// 保存元素的数组</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="483" y="1060.4014">int8_t contents[]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="52" x="467" y="1076.6982">} intset</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="471" y="1092.9951"/><path d="M414,1023.9609 L424,1023.9609 C439,1023.9609 439,1014.8125 454,1014.8125 L464,1014.8125 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="467" y="1111.292">hashset</text><path d="M414,1023.9609 L424,1023.9609 C439,1023.9609 439,1106.4453 454,1106.4453 L464,1106.4453 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M288,1014.8125 L298,1014.8125 C313,1014.8125 313,1023.9609 328,1023.9609 L338,1023.9609 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M195,1054.1445 L205,1054.1445 C220,1054.1445 220,1014.8125 235,1014.8125 L245,1014.8125 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="93" x="245" y="1125.5938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="255" y="1148.5889">Sorted Set</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="391" y="1130.292">skiplist</text><path d="M338,1143.7422 L348,1143.7422 C363,1143.7422 363,1125.4453 378,1125.4453 L388,1125.4453 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="391" y="1148.5889">ziplist</text><path d="M338,1143.7422 L348,1143.7422 C363,1143.7422 363,1143.7422 378,1143.7422 L388,1143.7422 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="391" y="1166.8857">用途</text><path d="M338,1143.7422 L348,1143.7422 C363,1143.7422 363,1162.0391 378,1162.0391 L388,1162.0391 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M195,1054.1445 L205,1054.1445 C220,1054.1445 220,1143.7422 235,1143.7422 L245,1143.7422 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="60" x="245" y="1332.8594"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="255" y="1355.8545">String</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="17" x="358" y="1185.8857">int</text><path d="M305,1351.0078 L315,1351.0078 C330,1351.0078 330,1181.0391 345,1181.0391 L355,1181.0391 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="30" x="358" y="1204.1826">long</text><path d="M305,1351.0078 L315,1351.0078 C330,1351.0078 330,1199.3359 345,1199.3359 L355,1199.3359 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="362" y="1222.4795"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="358" y="1238.7764">raw(embstr &lt; 39b</text><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="31" x="487" y="1238.7764">SDS</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="5" x="518" y="1238.7764">)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="362" y="1255.0732"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="358" y="1271.3701">struct</text><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="55" x="402" y="1271.3701">sdshdr</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="461" y="1271.3701">{ // 字符串长度</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="222" x="374" y="1287.667">int len // buf数组中未使用的字节数</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="374" y="1303.9639">int free // 字节数组，用于保存字符串</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="374" y="1320.2607">char buf[]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="9" x="358" y="1336.5576">}</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="362" y="1352.8545"/><path d="M305,1351.0078 L315,1351.0078 C330,1351.0078 330,1282.8203 345,1282.8203 L355,1282.8203 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="48" x="355" y="1425.4922"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="365" y="1448.4873">特点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="252" x="456" y="1371.1514">常数复杂度获取字符串长度，内置了长度</text><path d="M403,1443.6406 L413,1443.6406 C428,1443.6406 428,1366.3047 443,1366.3047 L453,1366.3047 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="224" x="456" y="1389.4482">杜绝缓冲区溢出，空间分配测测策略</text><path d="M403,1443.6406 L413,1443.6406 C428,1443.6406 428,1384.6016 443,1384.6016 L453,1384.6016 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="460" y="1407.7451"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="252" x="456" y="1424.042">减少修改字符串时带来的内存重分配次数</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="456" y="1440.3389">&lt; 1Mb --&gt; *2</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="456" y="1456.6357">&gt;= 1Mb --&gt; +1Mb</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="456" y="1472.9326">free 记录未使用的空间，需要时删除</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="460" y="1489.2295"/><path d="M403,1443.6406 L413,1443.6406 C428,1443.6406 428,1443.6406 443,1443.6406 L453,1443.6406 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="456" y="1507.5264">二进制安全</text><path d="M403,1443.6406 L413,1443.6406 C428,1443.6406 428,1502.6797 443,1502.6797 L453,1502.6797 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="456" y="1525.8232">最大 512Mb</text><path d="M403,1443.6406 L413,1443.6406 C428,1443.6406 428,1520.9766 443,1520.9766 L453,1520.9766 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M305,1351.0078 L315,1351.0078 C330,1351.0078 330,1443.6406 345,1443.6406 L355,1443.6406 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M195,1054.1445 L205,1054.1445 C220,1054.1445 220,1351.0078 235,1351.0078 L245,1351.0078 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="101" x="245" y="1548.5703"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="255" y="1571.5654">hyperloglog</text><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="62" x="396" y="1548.5703"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="406" y="1571.5654">优缺点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="182" x="511" y="1544.1201">概率数据结构统计唯一的事物</text><path d="M458,1566.7188 L468,1566.7188 C483,1566.7188 483,1539.2734 498,1539.2734 L508,1539.2734 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="511" y="1562.417">&lt; 1% 的误差</text><path d="M458,1566.7188 L468,1566.7188 C483,1566.7188 483,1557.5703 498,1557.5703 L508,1557.5703 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="511" y="1580.7139">最多用 12k</text><path d="M458,1566.7188 L468,1566.7188 C483,1566.7188 483,1575.8672 498,1575.8672 L508,1575.8672 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="281" x="511" y="1599.0107">技术上是不同的数据结构，但是编码成 string</text><path d="M458,1566.7188 L468,1566.7188 C483,1566.7188 483,1594.1641 498,1594.1641 L508,1594.1641 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M346,1566.7188 L356,1566.7188 C371,1566.7188 371,1566.7188 386,1566.7188 L396,1566.7188 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M195,1054.1445 L205,1054.1445 C220,1054.1445 220,1566.7188 235,1566.7188 L245,1566.7188 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="43" x="245" y="1786.207"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="23" x="255" y="1809.2021">List</text><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="76" x="338" y="1734.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="348" y="1757.8311">数据结构</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="471" y="1617.3076"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="28" x="471" y="1617.3076">节点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="467" y="1633.6045">typedef structlis tNode{</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="483" y="1649.9014">struct listNode* prev // 前置节点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="483" y="1666.1982">struct listNode* next // 后置节点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="483" y="1682.4951">void* value // 节点值 可放任何节点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="467" y="1698.792">} listNode</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="471" y="1715.0889"/><path d="M414,1752.9844 L424,1752.9844 C439,1752.9844 439,1661.3516 454,1661.3516 L464,1661.3516 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="471" y="1733.3857"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="28" x="471" y="1733.3857">链表</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="467" y="1749.6826">typedef struct list {</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="483" y="1765.9795">listNode *head // 表头节点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="483" y="1782.2764">listNode *tail // 表尾节点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="483" y="1798.5732">unsigned long len // 链表包含的节点数量</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="253" x="483" y="1814.8701">void* (*dup)(void* ptr) // 节点复制函数</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="483" y="1831.167">void (*free)(void* ptr) // 节点释放函数</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="483" y="1847.4639">int (*match)(void* ptr, void* key) // 节点对比函数</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="32" x="467" y="1863.7607">} list</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="471" y="1880.0576"/><path d="M414,1752.9844 L424,1752.9844 C439,1752.9844 439,1801.875 454,1801.875 L464,1801.875 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="467" y="1898.3545">ziplist 节约内存</text><path d="M414,1752.9844 L424,1752.9844 C439,1752.9844 439,1893.5078 454,1893.5078 L464,1893.5078 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M288,1804.3555 L298,1804.3555 C313,1804.3555 313,1752.9844 328,1752.9844 L338,1752.9844 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="76" x="338" y="1902.8047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="348" y="1925.7998">使用场景</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="467" y="1916.6514">社交网络最后更新的 post</text><path d="M414,1920.9531 L424,1920.9531 C439,1920.9531 439,1911.8047 454,1911.8047 L464,1911.8047 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="467" y="1934.9482">进程间交互生产者-消费者</text><path d="M414,1920.9531 L424,1920.9531 C439,1920.9531 439,1930.1016 454,1930.1016 L464,1930.1016 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M288,1804.3555 L298,1804.3555 C313,1804.3555 313,1920.9531 328,1920.9531 L338,1920.9531 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="48" x="338" y="1959.1016"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="348" y="1982.0967">特点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="439" y="1963.7998">上限 list，LTRIM</text><path d="M386,1977.25 L396,1977.25 C411,1977.25 411,1958.9531 426,1958.9531 L436,1958.9531 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="439" y="1982.0967">阻塞操作 B{L|R}{PUSH|POP}</text><path d="M386,1977.25 L396,1977.25 C411,1977.25 411,1977.25 426,1977.25 L436,1977.25 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178" x="439" y="2000.3936">循环列表，可靠队列 LMOVE</text><path d="M386,1977.25 L396,1977.25 C411,1977.25 411,1995.5469 426,1995.5469 L436,1995.5469 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M288,1804.3555 L298,1804.3555 C313,1804.3555 313,1977.25 328,1977.25 L338,1977.25 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M195,1054.1445 L205,1054.1445 C220,1054.1445 220,1804.3555 235,1804.3555 L245,1804.3555 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="67" x="245" y="2033.6953"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="255" y="2056.6904">bitmap</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="193" x="365" y="2019.3936">数据结构并不真实存在，string</text><path d="M312,2051.8438 L322,2051.8438 C337,2051.8438 337,2014.5469 352,2014.5469 L362,2014.5469 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="365" y="2037.6904">最大 512M， 2^32</text><path d="M312,2051.8438 L322,2051.8438 C337,2051.8438 337,2032.8438 352,2032.8438 L362,2032.8438 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="48" x="362" y="2051.9922"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="372" y="2074.9873">用途</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="463" y="2065.8389">各种实时分析</text><path d="M410,2070.1406 L420,2070.1406 C435,2070.1406 435,2060.9922 450,2060.9922 L460,2060.9922 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="324" x="463" y="2084.1357">存储与对象 id 相关的空间高效的高性能的 bool 信息</text><path d="M410,2070.1406 L420,2070.1406 C435,2070.1406 435,2079.2891 450,2079.2891 L460,2079.2891 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M312,2051.8438 L322,2051.8438 C337,2051.8438 337,2070.1406 352,2070.1406 L362,2070.1406 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M195,1054.1445 L205,1054.1445 C220,1054.1445 220,2051.8438 235,2051.8438 L245,2051.8438 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M69,1647.418 L79,1647.418 C94,1647.418 94,1054.1445 109,1054.1445 L119,1054.1445 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="48" x="119" y="2163.8828"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="129" y="2186.8779">集群</text><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="67" x="217" y="2117.4375"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="227" y="2140.4326">cluster</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="337" y="2112.2842">16384 slot?</text><path d="M284,2135.5859 L294,2135.5859 C309,2135.5859 309,2107.4375 324,2107.4375 L334,2107.4375 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="48" x="334" y="2126.5859"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="344" y="2149.5811">原理</text><path d="M284,2135.5859 L294,2135.5859 C309,2135.5859 309,2144.7344 324,2144.7344 L334,2144.7344 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M167,2182.0313 L177,2182.0313 C192,2182.0313 192,2135.5859 207,2135.5859 L217,2135.5859 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="75" x="217" y="2182.8828"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="227" y="2205.8779">sentinel</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="345" y="2187.5811">选举过程</text><path d="M292,2201.0313 L302,2201.0313 C317,2201.0313 317,2182.7344 332,2182.7344 L342,2182.7344 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="345" y="2205.8779">脑裂</text><path d="M292,2201.0313 L302,2201.0313 C317,2201.0313 317,2201.0313 332,2201.0313 L342,2201.0313 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="29" x="345" y="2224.1748">raft?</text><path d="M292,2201.0313 L302,2201.0313 C317,2201.0313 317,2219.3281 332,2219.3281 L342,2219.3281 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M167,2182.0313 L177,2182.0313 C192,2182.0313 192,2201.0313 207,2201.0313 L217,2201.0313 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="220" y="2243.1748">如何扩容</text><path d="M167,2182.0313 L177,2182.0313 C192,2182.0313 192,2238.3281 207,2238.3281 L217,2238.3281 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="220" y="2261.4717">各个节点间怎么通信的</text><path d="M167,2182.0313 L177,2182.0313 C192,2182.0313 192,2256.625 207,2256.625 L217,2256.625 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M69,1647.418 L79,1647.418 C94,1647.418 94,2182.0313 109,2182.0313 L119,2182.0313 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="62" x="119" y="2312.3672"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="129" y="2335.3623">可用性</text><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="129" x="231" y="2275.7734"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="241" y="2298.7686">与数据库一致性 *</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="413" y="2289.6201">cache aside</text><path d="M360,2293.9219 L370,2293.9219 C385,2293.9219 385,2284.7734 400,2284.7734 L410,2284.7734 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="413" y="2307.917">write through</text><path d="M360,2293.9219 L370,2293.9219 C385,2293.9219 385,2303.0703 400,2303.0703 L410,2303.0703 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M181,2330.5156 L191,2330.5156 C206,2330.5156 206,2293.9219 221,2293.9219 L231,2293.9219 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="234" y="2336.0654">缓存雪崩 多 key 集体失效</text><path d="M181,2330.5156 L191,2330.5156 C206,2330.5156 206,2331.2188 221,2331.2188 L231,2331.2188 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="234" y="2354.3623">缓存击穿 单热点 key 失效</text><path d="M181,2330.5156 L191,2330.5156 C206,2330.5156 206,2349.5156 221,2349.5156 L231,2349.5156 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="256" x="234" y="2372.6592">缓存穿透，猛攻 key 不存在，布隆过滤器</text><path d="M181,2330.5156 L191,2330.5156 C206,2330.5156 206,2367.8125 221,2367.8125 L231,2367.8125 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="234" y="2390.9561">怎么保证redis和mysql的一致性</text><path d="M181,2330.5156 L191,2330.5156 C206,2330.5156 206,2386.1094 221,2386.1094 L231,2386.1094 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M69,1647.418 L79,1647.418 C94,1647.418 94,2330.5156 109,2330.5156 L119,2330.5156 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="245" x="119" y="2413.7031"/><a href="https://mp.weixin.qq.com/s/JHeZr-sX1MdGdB8eWU95MQ" target="_top" title="https://mp.weixin.qq.com/s/JHeZr-sX1MdGdB8eWU95MQ" xlink:actuate="onRequest" xlink:href="https://mp.weixin.qq.com/s/JHeZr-sX1MdGdB8eWU95MQ" xlink:show="new" xlink:title="https://mp.weixin.qq.com/s/JHeZr-sX1MdGdB8eWU95MQ" xlink:type="simple"><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="165" x="129" y="2436.6982">Redis分布式锁无死角分析</text></a><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="298" y="2436.6982">分布式锁</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="417" y="2409.2529">实现方法</text><path d="M364,2431.8516 L374,2431.8516 C389,2431.8516 389,2404.4063 404,2404.4063 L414,2404.4063 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="417" y="2427.5498">过期时间的制定</text><path d="M364,2431.8516 L374,2431.8516 C389,2431.8516 389,2422.7031 404,2422.7031 L414,2422.7031 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="417" y="2445.8467">续锁</text><path d="M364,2431.8516 L374,2431.8516 C389,2431.8516 389,2441 404,2441 L414,2441 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="60" x="417" y="2464.1436">RedLock</text><path d="M364,2431.8516 L374,2431.8516 C389,2431.8516 389,2459.2969 404,2459.2969 L414,2459.2969 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M69,1647.418 L79,1647.418 C94,1647.418 94,2431.8516 109,2431.8516 L119,2431.8516 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="146" x="119" y="2529.6328"/><a href="https://zhuanlan.zhihu.com/p/356059845" target="_top" title="https://zhuanlan.zhihu.com/p/356059845" xlink:actuate="onRequest" xlink:href="https://zhuanlan.zhihu.com/p/356059845" xlink:show="new" xlink:title="https://zhuanlan.zhihu.com/p/356059845" xlink:type="simple"><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="70" x="129" y="2552.6279">多线程揭秘</text></a><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="199" y="2552.6279">线程模型</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="33" x="318" y="2506.1826">epoll</text><path d="M265,2547.7813 L275,2547.7813 C290,2547.7813 290,2501.3359 305,2501.3359 L315,2501.3359 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="118" x="315" y="2520.4844"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="325" y="2543.4795">单线程的优缺点</text><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="48" x="483" y="2486.8906"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="493" y="2509.8857">优点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="293" x="584" y="2482.4404">I/O 密集型，非 CPU 密集型，瓶颈在于网络 I/O</text><path d="M531,2505.0391 L541,2505.0391 C556,2505.0391 556,2477.5938 571,2477.5938 L581,2477.5938 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="584" y="2500.7373">避免过多的上下文切换开销</text><path d="M531,2505.0391 L541,2505.0391 C556,2505.0391 556,2495.8906 571,2495.8906 L581,2495.8906 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="584" y="2519.0342">避免同步机制的开销</text><path d="M531,2505.0391 L541,2505.0391 C556,2505.0391 556,2514.1875 571,2514.1875 L581,2514.1875 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="584" y="2537.3311">简单可维护</text><path d="M531,2505.0391 L541,2505.0391 C556,2505.0391 556,2532.4844 571,2532.4844 L581,2532.4844 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M433,2538.6328 L443,2538.6328 C458,2538.6328 458,2505.0391 473,2505.0391 L483,2505.0391 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="48" x="483" y="2557.0781"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="493" y="2580.0732">缺点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="588" y="2555.6279"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="406" x="584" y="2571.9248">多核的利用率并不算高，而且每次主线程都必须在分配完任务之后</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="377" x="584" y="2588.2217">忙轮询等待所有 I/O 线程完成任务之后才能继续执行其他逻辑</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="588" y="2604.5186"/><path d="M531,2575.2266 L541,2575.2266 C556,2575.2266 556,2575.2266 571,2575.2266 L581,2575.2266 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M433,2538.6328 L443,2538.6328 C458,2538.6328 458,2575.2266 473,2575.2266 L483,2575.2266 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M265,2547.7813 L275,2547.7813 C290,2547.7813 290,2538.6328 305,2538.6328 L315,2538.6328 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="318" y="2622.8154">什么情况下会出现阻塞，怎么解决</text><path d="M265,2547.7813 L275,2547.7813 C290,2547.7813 290,2617.9688 305,2617.9688 L315,2617.9688 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M69,1647.418 L79,1647.418 C94,1647.418 94,2547.7813 109,2547.7813 L119,2547.7813 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="62" x="119" y="2901.2344"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="129" y="2924.2295">持久化</text><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="48" x="231" y="2785.1211"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="241" y="2808.1162">AOF</text><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="48" x="329" y="2678.1563"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="339" y="2701.1514">优点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="194" x="430" y="2641.1123">durable 更高，fsync 策略不同</text><path d="M377,2696.3047 L387,2696.3047 C402,2696.3047 402,2636.2656 417,2636.2656 L427,2636.2656 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="197" x="430" y="2659.4092">append only，不会出太多问题</text><path d="M377,2696.3047 L387,2696.3047 C402,2696.3047 402,2654.5625 417,2654.5625 L427,2654.5625 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="434" y="2677.7061"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218" x="430" y="2694.0029">当 AOF 文件太大，自动后台重写。</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="379" x="430" y="2710.2998">Redis 继续写入旧文件。生成的文件足够小保留当前数据库。</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="430" y="2726.5967">第二个文件 ready，切换过去，开始写入新文件</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="0" x="434" y="2742.8936"/><path d="M377,2696.3047 L387,2696.3047 C402,2696.3047 402,2705.4531 417,2705.4531 L427,2705.4531 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="252" x="430" y="2761.1904">以简单和易懂的方式存一个接一个的操作</text><path d="M377,2696.3047 L387,2696.3047 C402,2696.3047 402,2756.3438 417,2756.3438 L427,2756.3438 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M279,2803.2695 L289,2803.2695 C304,2803.2695 304,2696.3047 319,2696.3047 L329,2696.3047 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="48" x="329" y="2765.6406"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="339" y="2788.6357">缺点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="430" y="2779.4873">更大</text><path d="M377,2783.7891 L387,2783.7891 C402,2783.7891 402,2774.6406 417,2774.6406 L427,2774.6406 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="430" y="2797.7842">有不可重新的 BUG</text><path d="M377,2783.7891 L387,2783.7891 C402,2783.7891 402,2792.9375 417,2792.9375 L427,2792.9375 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M279,2803.2695 L289,2803.2695 C304,2803.2695 304,2783.7891 319,2783.7891 L329,2783.7891 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="332" y="2825.9326">命令的实时写入</text><path d="M279,2803.2695 L289,2803.2695 C304,2803.2695 304,2821.0859 319,2821.0859 L329,2821.0859 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="140" x="329" y="2840.2344"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="339" y="2863.2295">对 AOF 文件的重写</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="522" y="2854.0811">BGREWRITEAOF</text><path d="M469,2858.3828 L479,2858.3828 C494,2858.3828 494,2849.2344 509,2849.2344 L519,2849.2344 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="522" y="2872.3779">在不影响服务客户端的情况下重建日志</text><path d="M469,2858.3828 L479,2858.3828 C494,2858.3828 494,2867.5313 509,2867.5313 L519,2867.5313 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M279,2803.2695 L289,2803.2695 C304,2803.2695 304,2858.3828 319,2858.3828 L329,2858.3828 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="332" y="2900.5264">阻塞？</text><path d="M279,2803.2695 L289,2803.2695 C304,2803.2695 304,2895.6797 319,2895.6797 L329,2895.6797 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="332" y="2918.8232">什么时候使用</text><path d="M279,2803.2695 L289,2803.2695 C304,2803.2695 304,2913.9766 319,2913.9766 L329,2913.9766 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="76" x="329" y="2933.125"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="52" x="339" y="2956.1201">durable</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="351" x="458" y="2937.8232">appendfsync always: 新命令添加到 AOF 执行，非常慢</text><path d="M405,2951.2734 L415,2951.2734 C430,2951.2734 430,2932.9766 445,2932.9766 L455,2932.9766 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="458" y="2956.1201">appendfsync everysec： 每秒一次，默认及推荐</text><path d="M405,2951.2734 L415,2951.2734 C430,2951.2734 430,2951.2734 445,2951.2734 L455,2951.2734 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="458" y="2974.417">appendfsync no： 不 fsync</text><path d="M405,2951.2734 L415,2951.2734 C430,2951.2734 430,2969.5703 445,2969.5703 L455,2969.5703 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M279,2803.2695 L289,2803.2695 C304,2803.2695 304,2951.2734 319,2951.2734 L329,2951.2734 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M181,2919.3828 L191,2919.3828 C206,2919.3828 206,2803.2695 221,2803.2695 L231,2803.2695 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="51" x="231" y="3077.3867"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="31" x="241" y="3100.3818">RDB</text><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="48" x="332" y="2997.8672"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="342" y="3020.8623">优点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="505" x="433" y="2993.417">紧凑的时间点的 Redis 数据。每小时保存最后 24 小时的数据，每 30 天一次快照</text><path d="M380,3016.0156 L390,3016.0156 C405,3016.0156 405,2988.5703 420,2988.5703 L430,2988.5703 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="433" y="3011.7139">利于灾难恢复，单一的紧凑文件</text><path d="M380,3016.0156 L390,3016.0156 C405,3016.0156 405,3006.8672 420,3006.8672 L430,3006.8672 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="258" x="433" y="3030.0107">最大化性能，因为父进程只是 fork 子进程</text><path d="M380,3016.0156 L390,3016.0156 C405,3016.0156 405,3025.1641 420,3025.1641 L430,3025.1641 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="433" y="3048.3076">重启相对较快</text><path d="M380,3016.0156 L390,3016.0156 C405,3016.0156 405,3043.4609 420,3043.4609 L430,3043.4609 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M282,3095.5352 L292,3095.5352 C307,3095.5352 307,3016.0156 322,3016.0156 L332,3016.0156 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="48" x="332" y="3054.1641"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="342" y="3077.1592">缺点</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="433" y="3068.0107">不适用最小化数据丢失</text><path d="M380,3072.3125 L390,3072.3125 C405,3072.3125 405,3063.1641 420,3063.1641 L430,3063.1641 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="433" y="3086.3076">如果数据库太大 fork() 耗时，ms ~ 1s</text><path d="M380,3072.3125 L390,3072.3125 C405,3072.3125 405,3081.4609 420,3081.4609 L430,3081.4609 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M282,3095.5352 L292,3095.5352 C307,3095.5352 307,3072.3125 322,3072.3125 L332,3072.3125 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="76" x="332" y="3110.4609"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="342" y="3133.4561">rdbSave</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="226" x="461" y="3124.3076">SAVE： 直接调用 rdbSave，阻塞；</text><path d="M408,3128.6094 L418,3128.6094 C433,3128.6094 433,3119.4609 448,3119.4609 L458,3119.4609 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="375" x="461" y="3142.6045">BGSAVE： fork 子进程，子进程调用 rdbSave，仍处理请求</text><path d="M408,3128.6094 L418,3128.6094 C433,3128.6094 433,3137.7578 448,3137.7578 L458,3137.7578 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M282,3095.5352 L292,3095.5352 C307,3095.5352 307,3128.6094 322,3128.6094 L332,3128.6094 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="335" y="3170.7529">rdbLoad</text><path d="M282,3095.5352 L292,3095.5352 C307,3095.5352 307,3165.9063 322,3165.9063 L332,3165.9063 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="335" y="3189.0498">用处</text><path d="M282,3095.5352 L292,3095.5352 C307,3095.5352 307,3184.2031 322,3184.2031 L332,3184.2031 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="335" y="3207.3467">什么时候使用</text><path d="M282,3095.5352 L292,3095.5352 C307,3095.5352 307,3202.5 322,3202.5 L332,3202.5 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M181,2919.3828 L191,2919.3828 C206,2919.3828 206,3095.5352 221,3095.5352 L231,3095.5352 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M69,1647.418 L79,1647.418 C94,1647.418 94,2919.3828 109,2919.3828 L119,2919.3828 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1kdgkgzuf4oy9)" height="36.2969" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="48" x="119" y="3230.0938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="129" y="3253.0889">管道</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="220" y="3225.6436">用处</text><path d="M167,3248.2422 L177,3248.2422 C192,3248.2422 192,3220.7969 207,3220.7969 L217,3220.7969 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="220" y="3243.9404">原理</text><path d="M167,3248.2422 L177,3248.2422 C192,3248.2422 192,3239.0938 207,3239.0938 L217,3239.0938 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="220" y="3262.2373">原子性： 不保证</text><path d="M167,3248.2422 L177,3248.2422 C192,3248.2422 192,3257.3906 207,3257.3906 L217,3257.3906 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="220" y="3280.5342">和事务的区别？</text><path d="M167,3248.2422 L177,3248.2422 C192,3248.2422 192,3275.6875 207,3275.6875 L217,3275.6875 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><path d="M69,1647.418 L79,1647.418 C94,1647.418 94,3248.2422 109,3248.2422 L119,3248.2422 " fill="none" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7072b2ca4d4df85d8832dba44f8958c9]
@startmindmap
* Redis
** 数据结构

*** Hash
**** 数据结构
*****_ ziplist
*****_:
哈希表
typedef struct dictht {
    // 哈希表数组
    dictEntry **table
    // 哈希表大小
    unsigned long size
    // 哈希表大小掩码，用于计算索引值
    // 总是等于 size - 1
    unsigned long sizemask
    // 该哈希表已有节点的数量
    unsigned long used

} dictht
;
*****_:
哈希表节点
typedef struct dictEntry {
    // 键
    void *key
    // 值
    union {
        void *val
        uint64_t u64
        int64_t s64
    } v
    // 指向下个哈希表节点，形成链表
    struct dictEntry *next

} dictEntry
;
*****_:
字典
typedef struct dict {
    // 类型特定函数
    dictType *type
    // 私有数据
    void *privdata
    // 哈希表 ht[1]只在 rehash 使用
    dictht ht[2]
    // rehash 索引
    // 当 rehash 不在进行时，值为 -1
    int rehashidx; /* rehashing not in progress if rehashidx == -1 */
} dict
;
**** 负载因子
*****_ 没有 BG ht[0].used / ht[0].size > 1
*****_ 有 BG ht[0].used / ht[0].size > 5
*****_ BG 会启动子进程，copy-on-write，提高效率，提高负载因子，避免 re
*****_ ht[0].used / ht[0].size < 0.1 收缩 
**** rehash
*****_ 1. 为 ht[1] 分配空间， 让字典同时持有 ht[0] 和 ht[1] 两个哈希表
*****_ 2. rehashidx = 0，表示开始
*****_ 3. 开始对桶内元素 rehash，完成后 hashidx++，表示下个桶位置
*****_ 4. ht[0] 所有的 rehash 完，hashidx = -1

*** Set
****_ 无序的 string 集合
**** 数据结构
*****_: 
typedef struct **intset** {
    // 保存元素所使用的类型的长度
    uint32_t encoding
    // 元素个数
    uint32_t length
    // 保存元素的数组
    int8_t contents[]
} intset
;
*****_ hashset

*** Sorted Set
****_ skiplist
****_ ziplist
****_ 用途

*** String
****_ int
****_ long
****_: 
raw(embstr < 39b **SDS**)

struct **sdshdr** { // 字符串长度 
    int len // buf数组中未使用的字节数 
    int free // 字节数组，用于保存字符串 
    char buf[] 
}
;
**** 特点
*****_ 常数复杂度获取字符串长度，内置了长度
*****_ 杜绝缓冲区溢出，空间分配测测策略
*****_:
减少修改字符串时带来的内存重分配次数
< 1Mb - -> *2
>= 1Mb - -> +1Mb
free 记录未使用的空间，需要时删除
;
*****_ 二进制安全
*****_ 最大 512Mb


*** hyperloglog
**** 优缺点
*****_ 概率数据结构统计唯一的事物
*****_ < 1% 的误差
*****_ 最多用 12k
*****_ 技术上是不同的数据结构，但是编码成 string


*** List
**** 数据结构
*****_: **节点**
typedef structlis tNode{ 
    struct listNode* prev // 前置节点 
    struct listNode* next // 后置节点 
    void* value // 节点值 可放任何节点 
} listNode
;
*****_: **链表**
typedef struct list {  
    listNode *head // 表头节点
    listNode *tail // 表尾节点
    unsigned long len // 链表包含的节点数量
    void* (*dup)(void* ptr) // 节点复制函数
    void (*free)(void* ptr) // 节点释放函数
    int (*match)(void* ptr, void* key) // 节点对比函数
} list
;
*****_ ziplist 节约内存
**** 使用场景
*****_ 社交网络最后更新的 post
*****_ 进程间交互生产者-消费者
**** 特点
*****_ 上限 list，LTRIM
*****_ 阻塞操作 B{L|R}{PUSH|POP}
*****_ 循环列表，可靠队列 LMOVE

*** bitmap
****_ 数据结构并不真实存在，string
****_ 最大 512M， 2^32
**** 用途
*****_ 各种实时分析
*****_ 存储与对象 id 相关的空间高效的高性能的 bool 信息



** 集群
*** cluster
****_ 16384 slot?
**** 原理

*** sentinel
****_ 选举过程
****_ 脑裂
****_ raft?

***_ 如何扩容
***_ 各个节点间怎么通信的

** 可用性
*** 与数据库一致性 *
****_ cache aside
****_ write through
***_ 缓存雪崩 多 key 集体失效
***_ 缓存击穿 单热点 key 失效
***_ 缓存穿透，猛攻 key 不存在，布隆过滤器
***_ 怎么保证redis和mysql的一致性

** [[https://mp.weixin.qq.com/s/JHeZr-sX1MdGdB8eWU95MQ Redis分布式锁无死角分析]] 分布式锁
***_ 实现方法
***_ 过期时间的制定
***_ 续锁
***_ RedLock

** [[https://zhuanlan.zhihu.com/p/356059845 多线程揭秘]]线程模型
***_ epoll
*** 单线程的优缺点
**** 优点
*****_ I/O 密集型，非 CPU 密集型，瓶颈在于网络 I/O
*****_ 避免过多的上下文切换开销
*****_ 避免同步机制的开销
*****_ 简单可维护
**** 缺点
*****_: 
多核的利用率并不算高，而且每次主线程都必须在分配完任务之后
忙轮询等待所有 I/O 线程完成任务之后才能继续执行其他逻辑
;


***_ 什么情况下会出现阻塞，怎么解决

** 持久化
*** AOF
**** 优点
*****_ durable 更高，fsync 策略不同
*****_ append only，不会出太多问题
*****_:
当 AOF 文件太大，自动后台重写。
Redis 继续写入旧文件。生成的文件足够小保留当前数据库。
第二个文件 ready，切换过去，开始写入新文件
;
*****_ 以简单和易懂的方式存一个接一个的操作
**** 缺点
*****_ 更大
*****_ 有不可重新的 BUG
****_ 命令的实时写入
**** 对 AOF 文件的重写
*****_ BGREWRITEAOF
*****_ 在不影响服务客户端的情况下重建日志
****_ 阻塞？
****_ 什么时候使用
**** durable 
*****_ appendfsync always: 新命令添加到 AOF 执行，非常慢
*****_ appendfsync everysec： 每秒一次，默认及推荐
*****_ appendfsync no： 不 fsync
*** RDB
**** 优点
*****_ 紧凑的时间点的 Redis 数据。每小时保存最后 24 小时的数据，每 30 天一次快照
*****_ 利于灾难恢复，单一的紧凑文件
*****_ 最大化性能，因为父进程只是 fork 子进程
*****_ 重启相对较快
**** 缺点
*****_ 不适用最小化数据丢失
*****_ 如果数据库太大 fork() 耗时，ms ~ 1s
**** rdbSave
*****_ SAVE： 直接调用 rdbSave，阻塞；
*****_ BGSAVE： fork 子进程，子进程调用 rdbSave，仍处理请求
****_ rdbLoad
****_ 用处
****_ 什么时候使用

** 管道
***_ 用处
***_ 原理
***_ 原子性： 不保证
***_ 和事务的区别？

@endmindmap

PlantUML version 1.2021.6(Fri May 14 07:09:51 UTC 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>